const topKFrequent = require("./topKFrequent");

describe("Тесты из примеров", () => {
  it("Пример 1", () => {
    expect(topKFrequent([1, 1, 1, 2, 2, 3], 2)).toEqual([1, 2]);
  });

  it("Пример 2", () => {
    expect(topKFrequent([1], 1)).toEqual([1]);
  });
});

describe("Непростые тесты", () => {
  it("Должно работать с k = количеству уникальных чисел", () => {
    expect(topKFrequent([1, 1, 1, 2, 2, 3], 3)).toEqual([1, 2, 3]);
  });

  it("Должно работать с большим количеством данных", () => {
    expect(
      topKFrequent(
        [
          1, 1, 1, 2, 2, 3, 3, 4, 4, 5, 6, 7, 8, 9, 10, 11, 12, 5, 6, 7, 8, 9,
          10, 11, 12, 1, 1, 1, 2, 2, 3, 3, 4, 4, 5, 6, 7, 8, 9, 10, 11, 12, 5,
          6, 7, 8, 9, 10, 11, 12, 1, 1, 1, 2, 2, 3, 3, 4, 4, 5, 6, 7, 8, 9, 10,
          11, 12, 5, 6, 7, 8, 9, 10, 11, 12, 1, 1, 1, 2, 2, 3, 3, 4, 4, 5, 6, 7,
          8, 9, 10, 11, 12, 5, 6, 7, 8, 9, 10, 11, 12,
        ],
        1
      )
    ).toEqual([1]);
  });

  it("Должно работать с отрицательными числами", () => {
    expect(topKFrequent([-1, -1], 1)).toEqual([-1]);
  });

  it("Должно работать с большим количеством отрицательных чисел", () => {
    expect(
      topKFrequent(
        [
          -1, -2, -2, -3, -4, -5, -6, -7, -8, -9, -20, -20, -20, -20, -20, -20,
          20, -1, -2, -2, -3, -4, -5, -6, -7, -8, -9, -20, -20, -20, -20, -20,
        ],
        1
      )
    ).toEqual([-20]);
  });

  it("Должно работать с нулями", () => {
    expect(topKFrequent([0, 0, 0], 1)).toEqual([0]);
  });
});

describe("Проверка пограничных значений длины массива nums", () => {
  it("Не должно работать с длиной == 0", () => {
    expect(topKFrequent([], 1)).toEqual([]);
  });

  it("Должно работать с длиной == 1", () => {
    expect(topKFrequent([2], 1)).toEqual([2]);
  });

  it("Должно работать с длиной == 104", () => {
    expect(topKFrequent(Array(104).fill(1), 1)).toEqual([1]);
  });

  it("Должно работать с длиной == 105", () => {
    expect(topKFrequent(Array(105).fill(1), 1)).toEqual([1]);
  });

  it("Не должно работать с длиной > 105", () => {
    expect(topKFrequent(Array(106).fill(1), 1)).toEqual([]);
  });
});

describe("Проверка пограничных значений чисел массива nums", () => {
  it("Не должно работать с числом < -104", () => {
    expect(topKFrequent([-105], 1)).toEqual([]);
  });

  it("Должно работать с числом == -104", () => {
    expect(topKFrequent([-104], 1)).toEqual([-104]);
  });

  it("Должно работать с числом == -103", () => {
    expect(topKFrequent([-103], 1)).toEqual([-103]);
  });

  it("Должно работать с числом == 103", () => {
    expect(topKFrequent([103], 1)).toEqual([103]);
  });

  it("Должно работать с числом == 104", () => {
    expect(topKFrequent([104], 1)).toEqual([104]);
  });

  it("Не должно работать с числом > 104", () => {
    expect(topKFrequent([105], 1)).toEqual([]);
  });
});

describe("Проверка пограничных значений k", () => {
  it("Не должно работать с k == 0", () => {
    expect(topKFrequent([1, 1, 1, 2, 2, 3], 0)).toEqual([]);
  });

  it("Должно работать с k == 1", () => {
    expect(topKFrequent([1, 1, 1, 2, 2, 3], 1)).toEqual([1]);
  });

  it("Должно работать с k == 2", () => {
    expect(topKFrequent([1, 2], 2)).toEqual([1, 2]);
  });

  it("Не должно работать если k > количество уникальных чисел", () => {
    expect(topKFrequent([1, 1, 1, 2, 2, 3], 5)).toEqual([]);
  });
});

describe("Проверка недопустимых значений чисел массива nums", () => {
  it("Не должно работать со строками", () => {
    expect(topKFrequent(["hello", "world"], 2)).toEqual([]);
  });
  it("Не должно работать с нецелыми числами", () => {
    expect(topKFrequent([1.5, 2.5], 2)).toEqual([]);
  });
  it("Не должно работать с null", () => {
    expect(topKFrequent([null, null], 2)).toEqual([]);
  });
  it("Не должно работать с boolean", () => {
    expect(topKFrequent([true, false], 2)).toEqual([]);
  });
  it("Не должно работать с другими типами данных", () => {
    expect(topKFrequent([{}, {}], 2)).toEqual([]);
  });
  it("Не должно работать с бесконечным числом", () => {
    expect(topKFrequent([Infinity, Infinity], 2)).toEqual([]);
  });

  it("Не должно работать с объектом, передаваемого в качестве массива", () => {
    expect(topKFrequent({ 1: 3, 4: 5 }, 2)).toEqual([]);
  });

  it("Не должно работать с другими типами параметров", () => {
    expect(topKFrequent(2, [3, 2])).toEqual([]);
  });
});

describe("Проверка недопустимых значений k", () => {
  it("Не должно работать с нецелыми числом k", () => {
    expect(topKFrequent([1, 1, 1, 2, 2, 3], 2.5)).toEqual([]);
  });

  it("Не должно работать с другими типами k", () => {
    expect(topKFrequent([1, 1, 1, 2, 2, 3], "Hello")).toEqual([]);
  });

  it("Не должно работать с бесконечным числом k", () => {
    expect(topKFrequent([1, 1, 1, 2, 2, 3], Infinity)).toEqual([]);
  });
});
